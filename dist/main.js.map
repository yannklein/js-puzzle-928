{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/puzzle.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH,CAAC,C","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/puzzle.js\");\n","// ////////////////\n// Rehearsal\n// ////////////////\n\n// 1. Select elements (button, hint)\nconst button = document.querySelector(\"#show-hint\");\nconst hint = document.querySelector(\".hint\");\n\n// 2. Listen to an event (click on the button)\nbutton.addEventListener(\"click\", (event) => {\n  console.log(event);\n  // 3. Change the DOM (add a class active to the hint)\n  hint.classList.add(\"active\");\n});\n\n\n// ////////////////\n// Live code\n// ////////////////\nconst isNeighborEmpty = (tile) => {\n  //find the cell index of the clicked tile (row index, parent)\n  //the find the row of the clicked tile.\n  //select the empty tile\n  //find cell index and row index\n  //if we are next to empty, return true, if not return false \n  const tileCellIndex = tile.cellIndex;\n  const tileRowIndex = tile.parentElement.rowIndex;\n  const empty = document.querySelector(\".empty\");\n  const emptyCellIndex = empty.cellIndex;\n  const emptyRowIndex = empty.parentElement.rowIndex;\n  // (tileCellIndex - emptyCellIndex ---> +1 or -1) AND (tileRowIndex === emptyRowIndex)\n  // OR\n  // (tileRowIndex - emptyRowIndex ---> +1 or -1) AND (tileCellIndex === emptyCellIndex)\n  // -----> TRUE\n  return ( Math.abs(tileCellIndex - emptyCellIndex) + Math.abs(tileRowIndex - emptyRowIndex) === 1 );\n};\n\nconst swap = (tile) => {\n  const empty = document.querySelector(\".empty\");\n  // remove .empty class from empty\n  empty.classList.remove(\"empty\");\n  // add .empty class to tile\n  tile.classList.add(\"empty\");\n  // add innerText to empty\n  empty.innerText = tile.innerText;\n  // remove innerText from tile\n  tile.innerText = \"\";\n\n};\n\nconst didWeWin = (tiles) => {\n  const result = \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\";\n  const tileNumbers = [];\n  tiles.forEach((tile) => {\n    tileNumbers.push(tile.innerText);\n  });\n  return (result === tileNumbers.join());\n}\n\n// 1. Select all the tiles\nconst tiles = document.querySelectorAll(\"td\"); // NOICE\n// 2. forEach element \ntiles.forEach((tile) => {\n  // 3. Listen to a click\n  tile.addEventListener(\"click\", (event) => {\n    // console.log(event);\n    // 4. Check if clicked tile is next to empty one (create a function!)\n    const clickedTile = event.currentTarget;\n    //isNeighborEmpty returning a boolean. \n    if(isNeighborEmpty(clickedTile)) {\n      //swap a tile to it\n      // 5. If \"yes\" use swap tiles \n      swap(clickedTile);\n      // 6. Check if we win \n      if (didWeWin(tiles)) {\n        alert(\"We won ðŸŽ¸\")\n      }\n    }\n\n  });\n})"],"sourceRoot":""}